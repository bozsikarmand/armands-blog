[{"content":"Written in Go, Hugo is an open source static site generator available under the Apache Licence 2.0. Hugo supports TOML, YAML and JSON data file types, Markdown and HTML content files and uses shortcodes to add rich content. Other notable features are taxonomies, multilingual mode, image processing, custom output formats, HTML/CSS/JS minification and support for Sass SCSS workflows.\nHugo makes use of a variety of open source projects including:\n https://github.com/russross/blackfriday https://github.com/alecthomas/chroma https://github.com/muesli/smartcrop https://github.com/spf13/cobra https://github.com/spf13/viper  Hugo is ideal for blogs, corporate websites, creative portfolios, online magazines, single page applications or even a website with thousands of pages.\nHugo is for people who want to hand code their own website without worrying about setting up complicated runtimes, dependencies and databases.\nWebsites built with Hugo are extremelly fast, secure and can be deployed anywhere including, AWS, GitHub Pages, Heroku, Netlify and any other hosting provider.\nLearn more and contribute on GitHub.\n","description":"Hugo, the world’s fastest framework for building websites","id":6,"section":"","tags":null,"title":"About","uri":"https://armands.blog/en/about/"},{"content":"In case you would like to avoid using the pre-built driver package provided by Brother please do the following in order to configure the printer on a secure wifi network:\n  Find an OS which is capable of creating ad-hoc network (current version of Ubuntu will suffice)\n  Find a compatible USB wifi stick (e.g.: ASUS USB-N13)\n  Do a factory reset on the printer. (To do this please refer to the user manual)\n  On my device I had to do the following:\n  Had to turn off the printer\n  Held GO button while turned on the printer\n- Held the GO button until all the LEDs lit up and the Ready LED light turned off\n  Released GO, all the LEDs turned off\n  Pressed GO ten times. The printer automatically restarted.\n To enable WIFI hold down GO button until (~10s) the network configuration page is being printed.\n  In the Node Type field the word \u0026ldquo;Active\u0026rdquo; should be shown.\n  After that install wine by this command:\n  sudo apt install wine\n Then download BRAdmin Light from here, which helps configuring the printer.\n  Connect to the SSID called \u0026ldquo;SETUP\u0026rdquo; created by the printer.\n  Start BRAdmin Light. It should find the device.\n  Connect to the printer web interface from the program (Right click / Device Home Page).\n  Under Network configuration (default user: admin, default pass: access) \u0026gt; TCP/IP set the correct Subnet mask and Gateway and set Boot method to DHCP and leave Enable APIPA checked, then press Submit button.\n  Press Network configuration \u0026gt; Configure Wireless\n  Set Infrastructure mode, provide your network SSID, Channel, Authentication and encryption method, password (all of these information can be seen on routers web interface which may vary depending on manufacturer) then press Submit\n  The printer should reboot.\n  Now connect to your router and check if printer is present.\n  If so, add it in any OS you would like.\n    Source: PC1MH techlog\n","description":"","id":10,"section":"posts","tags":["brother","hl-2135w","linux","ubuntu","wifi"],"title":"How to configure Brother HL-2135W over wifi in adhoc mode","uri":"https://armands.blog/en/posts/how-to-configure-brother-hl-2135w-over-wifi-in-adhoc-mode/"},{"content":"I was searching for days to answer all of my questions related to this topic, but I had no success, until I asked it on PROHARDVER!.\nAt first: I was afraid what will happen with the wearing level on my Samsung 830 SSD, will the partition alignment and TRIM be OK\u0026hellip;\nThen: I did not know anything about current hardware support of Ubuntu.\nA short how to how I installed Ubuntu on my system:\n  Since I was using Windows 10 I have disabled \u0026ldquo;Fast Startup\u0026rdquo;, checked BitLocker is off and turned off hibernation (powercfg /h off).\n\n  Disabled Fastboot in UEFI\n\n  Also disabled Secure Boot (Switched to \u0026ldquo;Other OS\u0026rdquo;)\n\n  Booted from UEFI pendrive.\n  Created an 1024MB fat32 primary partition (with the label \u0026ldquo;EFI\u0026rdquo;) with a free space of 1MiB preceding\n  I have 16GB of RAM so I created a 16384MB swap partition with linux-swap file system.\n  The rest (without the 10-15% provisioning space) went for / (root) with ext4.\n  Agreed the UEFI install warning\n\n  Then the install method was the same like on a BIOS machine.\n  I have installed fglrx for my Radeon R9 270X\n  Turned volume to maximum in alsamixer for my Xonar DS in Master Front\n\n  That\u0026rsquo;s all!\n  Thanks for reading!\nSources:\nSecure Boot settings (Image), Fastboot Settings (Image), UEFI settings (Image), Message (Image)\n","description":"","id":11,"section":"posts","tags":["15.04","install","ubuntu"],"title":"Install Ubuntu 15.04 (UEFI and GPT on SSD)","uri":"https://armands.blog/en/posts/install-ubuntu-15-04-uefi-and-gpt-on-ssd/"},{"content":"   ","description":"","id":12,"section":"posts","tags":null,"title":"Hollow Talk","uri":"https://armands.blog/en/posts/hollow-talk/"},{"content":"Two widely used extension of WordPress contains pretty severe errors. Unfortunately not every security hole can be fixed.\nResearchers at High-Tech Bridge in the previous weeks two WordPress plugins started to monitor closely. They did a thorough security analysis in the case of TheCartPress plugin which is made to support e-commerce and WP Photo Album Plus which is an extension especially for photo management. In both of them they found risky vulnerabilities, despite the latter received the proper fixes.\nErrors will stay with us in the next version of TheCartPress? TheCartPress is serving on more than 5000 WordPress-based websites, but the webshops which relies on it would have turned to be vulnerable since in High-Tech Bridge high number of security holes were revealed in connection with the extension. Principally the errors can give intruders the chance for XSS (Cross-site Scripting) attacks. One of the errors can turn out at the end of the order process namely at that time the application does not supervise all of the output parameters, thereupon – for instance by the manipulation of billing and shipping addresses – arbitrary HTML and/or script codes can be run.\nBeside the vulnerability described above researchers had to face with other problems. They discovered four XSS-related errors which could be exploited by the use of specially formatted links and arbitrary codes can be run in consequence of that. As long as a person with elevated administrative rights clicks on a link like the one previously described, the risk could get into a higher level. Furthermore another vulnerability threatens the systems which could give the chance for misusing PHP files in the course of directory traversal-type attacks.\nAccording to High-Tech Bridge they think TheCartPress 1.3.9 surely includes the vulnerability, but the previous versions could be concerned too. The biggest issue is that the developers of TheCartPress indicated by the 1st of May they discard any support in connection with the plugin, so it is far from certain these errors will be corrected in any time.\nThe photo manager is already safe In the apropos of the WP Photo Album Plus extension it is a bad news that researchers also found an XSS-related error - which they qualified as medium on the scale - in it. On the other hand we can serve you the good news too: though 50000 websites are affected by the security hole, the update is available. The newest version of the plugin does not include the vulnerability.\nSource: Biztonság Portál\n","description":"","id":13,"section":"posts","tags":["Biztonságportál","plugins","security","security hole","WordPress"],"title":"Newfound security vulerabilities threatening WordPress users","uri":"https://armands.blog/en/posts/newfound-security-vulerabilities-threatening-wordpress-users/"},{"content":"Some days ago computer scientists have revealed a critical bug in the video streaming service of Google called YouTube and what is important to mention by the exploitation of this programming error everyone could copy comments between all of the videos without any consequences. We will show you how the security researchers found out this tricky vulnerability.\nYouTube – similarly to other web services used by a wide range of users – is a popular experiment field for those who work on revealing web security vulnerabilities. These researchers work in the hope for a bounty or fame and/or simply for gratification. Certainly a lot of white hat hackers are trying to find security holes just only to make online services safer. Two Egyptian researcher was led by curiosity when they overhauled the video sharing site\u0026rsquo;s so called function.\nIbrahim El-Sayed and Ahmed Aboul-Ela few weeks ago devised analysing the comment handling system you usually find under videos. Although they believed the service of the site is a hoary old chestnut by the aspect of security but in the end they started to work on the analysis.\nNow we know they did not do it for nothing, after all they found an interesting vulnerability. Principally it did not give the chance to damage or seriously destruct the system but with the exploitation of this programming error anyone would have had been able to put upon with the contents generated by YouTube users in a way which could easily be automatized in the future.\nHow they found out the error? The researchers set up their test account not to display comments automatically, just after approval. After that they linked a comment to their video and approved it. During the experiment they continuously monitored (with the help of the freely available Burp Suite) the network requests between the client and the server. They started to manipulate two parameters: at first the identifier of the video was changed but they got stuck with an error message, so we can say this parameter was properly protected against modification. Unfortunately it is cannot be said about the identifier of comments.\nWhen the researchers modified this identifier they experienced the manner of the website with surprise. It was unravelled with the swapping of the comment identifiers in network requests they could link all the comments on YouTube to their own video. Moreover the copied comments stayed intact on their original place and no one got noticed about the actual procedure. Google patched the security hole in a flash and paid the $3133.7 reward to the Egyptian researchers.\nHowever there is the question which type of problems would have had been able to cause if the vulnerability had come to light. For instance anyone could link comments from popular videos to their own, and with this act could suggest that their own work was rated by the users. It could have been done with videos created in context of products or services which could easily lead to the delusion of users.\nAnother revelation from the last month Kamil Hismatullin, another security researcher started to monitor YouTube closely not a long ago. He started his research in connection with the YouTube Creator Studio and primarily XSS (Cross-Site Scripting) and CSRF (Cross-Site Request Form) vulnerabilities was found. In the meantime he did a fascinating discovery. Kamil realized with a simple URL hack he could delete arbitrary videos without any given permission. Google has also patched this security hole out of turn.\nSource: Biztonság Portál\n","description":"","id":14,"section":"posts","tags":["Biztonságportál","delete","Google","security","security hole","YouTube"],"title":"Serious programming error found in YouTube","uri":"https://armands.blog/en/posts/serious-programming-error-found-in-youtube/"}]